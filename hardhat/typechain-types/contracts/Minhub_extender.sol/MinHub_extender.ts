/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MinHub_extender {
  export type ProjectStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    uri: PromiseOrValue<string>;
  };

  export type ProjectStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string,
    string
  ] & {
    name: string;
    symbol: string;
    price: BigNumber;
    contractAddress: string;
    owner: string;
    uri: string;
  };
}

export interface MinHub_extenderInterface extends utils.Interface {
  functions: {
    "addProject(string,string,uint256,address,string)": FunctionFragment;
    "noOfProjects()": FunctionFragment;
    "projects(address,uint256)": FunctionFragment;
    "viewProjects()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addProject"
      | "noOfProjects"
      | "projects"
      | "viewProjects"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addProject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "noOfProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewProjects",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "noOfProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface MinHub_extender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinHub_extenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProject(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    noOfProjects(overrides?: CallOverrides): Promise<[BigNumber]>;

    projects(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, string] & {
        name: string;
        symbol: string;
        price: BigNumber;
        contractAddress: string;
        owner: string;
        uri: string;
      }
    >;

    viewProjects(
      overrides?: CallOverrides
    ): Promise<[MinHub_extender.ProjectStructOutput[]]>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addProject(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _contractAddress: PromiseOrValue<string>,
    _uri: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  noOfProjects(overrides?: CallOverrides): Promise<BigNumber>;

  projects(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, string, string] & {
      name: string;
      symbol: string;
      price: BigNumber;
      contractAddress: string;
      owner: string;
      uri: string;
    }
  >;

  viewProjects(
    overrides?: CallOverrides
  ): Promise<MinHub_extender.ProjectStructOutput[]>;

  withdraw(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addProject(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    noOfProjects(overrides?: CallOverrides): Promise<BigNumber>;

    projects(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, string] & {
        name: string;
        symbol: string;
        price: BigNumber;
        contractAddress: string;
        owner: string;
        uri: string;
      }
    >;

    viewProjects(
      overrides?: CallOverrides
    ): Promise<MinHub_extender.ProjectStructOutput[]>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addProject(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    noOfProjects(overrides?: CallOverrides): Promise<BigNumber>;

    projects(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewProjects(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProject(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    noOfProjects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewProjects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
